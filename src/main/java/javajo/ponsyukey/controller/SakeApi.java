/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package javajo.ponsyukey.controller;

import javajo.ponsyukey.model.CreateSakeRequest;
import javajo.ponsyukey.model.Error;
import javajo.ponsyukey.model.SakeListResponse;
import javajo.ponsyukey.model.SakeResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-22T16:58:15.851637+09:00[Asia/Tokyo]")
@Validated
@Api(value = "sake", description = "the sake API")
public interface SakeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /sake : 酒情報登録API
     *
     * @param createSakeRequest 酒情報登録に必要な情報 (required)
     * @return http ステータスコード 200 ok。バリデーションエラー時も200でレスポンスする (status code 200)
     *         or http ステータスコード 400 error (status code 400)
     *         or http ステータスコード 500 error (status code 500)
     */
    @ApiOperation(value = "酒情報登録API", nickname = "createSake", notes = "", response = SakeResponse.class, tags={ "sake", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "http ステータスコード 200 ok。バリデーションエラー時も200でレスポンスする", response = SakeResponse.class),
        @ApiResponse(code = 400, message = "http ステータスコード 400 error", response = Error.class),
        @ApiResponse(code = 500, message = "http ステータスコード 500 error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sake",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SakeResponse> createSake(@ApiParam(value = "酒情報登録に必要な情報", required = true) @Valid @RequestBody CreateSakeRequest createSakeRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"alcohol\" : 6.0274563, \"image\" : \"image\", \"polishingRatio\" : 1.4658129, \"taste\" : [ \"taste\", \"taste\" ], \"name\" : \"name\", \"brewery\" : { \"prefecture\" : \"prefecture\", \"name\" : \"name\" }, \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : \"type\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sake : 酒情報一覧取得API
     *
     * @param limit  (required)
     * @param offset  (required)
     * @return http ステータスコード 200 ok。バリデーションエラー時も200でレスポンスする (status code 200)
     *         or http ステータスコード 400 error (status code 400)
     *         or http ステータスコード 500 error (status code 500)
     */
    @ApiOperation(value = "酒情報一覧取得API", nickname = "getSake", notes = "", response = SakeListResponse.class, tags={ "sake", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "http ステータスコード 200 ok。バリデーションエラー時も200でレスポンスする", response = SakeListResponse.class),
        @ApiResponse(code = 400, message = "http ステータスコード 400 error", response = Error.class),
        @ApiResponse(code = 500, message = "http ステータスコード 500 error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sake",
        produces = { "application/json" }
    )
    default ResponseEntity<SakeListResponse> getSake(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "limit", required = true) Integer limit,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "offset", required = true) Integer offset) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"sakeList\" : [ { \"alcohol\" : 6.0274563, \"image\" : \"image\", \"polishingRatio\" : 1.4658129, \"taste\" : [ \"taste\", \"taste\" ], \"name\" : \"name\", \"brewery\" : { \"prefecture\" : \"prefecture\", \"name\" : \"name\" }, \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : \"type\" }, { \"alcohol\" : 6.0274563, \"image\" : \"image\", \"polishingRatio\" : 1.4658129, \"taste\" : [ \"taste\", \"taste\" ], \"name\" : \"name\", \"brewery\" : { \"prefecture\" : \"prefecture\", \"name\" : \"name\" }, \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : \"type\" } ], \"totalCount\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sake/{sakeId} : 酒情報取得API
     *
     * @param sakeId  (required)
     * @return http ステータスコード 200 ok。バリデーションエラー時も200でレスポンスする (status code 200)
     *         or http ステータスコード 400 error (status code 400)
     *         or http ステータスコード 500 error (status code 500)
     */
    @ApiOperation(value = "酒情報取得API", nickname = "getSakeDetail", notes = "", response = SakeResponse.class, tags={ "sake", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "http ステータスコード 200 ok。バリデーションエラー時も200でレスポンスする", response = SakeResponse.class),
        @ApiResponse(code = 400, message = "http ステータスコード 400 error", response = Error.class),
        @ApiResponse(code = 500, message = "http ステータスコード 500 error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sake/{sakeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SakeResponse> getSakeDetail(@ApiParam(value = "", required = true) @PathVariable("sakeId") String sakeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"alcohol\" : 6.0274563, \"image\" : \"image\", \"polishingRatio\" : 1.4658129, \"taste\" : [ \"taste\", \"taste\" ], \"name\" : \"name\", \"brewery\" : { \"prefecture\" : \"prefecture\", \"name\" : \"name\" }, \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : \"type\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
